<?php

/**
 * Aktual
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Aktual extends BaseAktual
{
    public static function findList() {
        return Doctrine_Query::create()
                ->select( 'id, title, created, edited, active')
                ->from( 'Aktual' )
                ->orderBy( 'edited desc');
    }

    public static function findForMainPage( $limit ) {
        return Doctrine_Query::create()
                ->select( 'id, title, shortcontent, edited')
                ->from( 'Aktual' )
                ->where( "active = '1'" )
                ->orderBy( 'edited DESC' )
                ->limit( $limit )
                ->execute();
    }

    public function getLabels() {
        $labels = $this->AktualsLabels;
        $aLabels = array();
        foreach ( $labels as $label ) {
            $aLabels[] = $label->Labels_id;
        }
        if ( sizeof( $aLabels ) == 0 ) {
            return array();
        }
        return Doctrine_Query::create()
            ->select()
            ->from( 'Label' )
            ->where( 'id in (' . implode(',', $aLabels ) .')')
            ->execute();
    }

    public static function getById( $id ) {
        return Doctrine_Core::getTable( 'Aktual' )->find( $id );
    }

    public static function getByLink( $link ) {
        if ( $link == '' ) {
            return self::findList()->execute();
        }
        return Doctrine_Core::getTable( 'Aktual' )->findOneByLink( $link );
    }

    public static function getByLabel( $id ) {
        return Doctrine_Query::create()
            ->select( 'a.*')
            ->from( 'Aktual a' )
            ->leftJoin( 'a.AktualsLabels l' )
            ->where( 'l.Labels_id = ?', $id )
            ->execute();
    }
    public function updateActual( $aData ) {
        if ( isset( $aData['id'] ) ) {
            $this->id = $aData['id'];
            $this->edited = new Doctrine_Expression('NOW()');
        } else {
            $this->created = new Doctrine_Expression('NOW()');
            $this->edited = new Doctrine_Expression('NOW()');
        }

        $aTags = Tag::checkTags( Tag::makeTags( $aData['tags'] ) );

        $this->title = $aData['title'];
        $this->shortcontent = trim( stripslashes( $aData['shortcontent'] ) );
        $this->fullcontent = trim( stripslashes( $aData['fullcontent'] ) );
        $this->tags = $aData['tags'];
        $this->active = $aData['active'];
        $this->link = Webbers_Normalize::Link( $aData['title'] );

        $this->AktualsTags->delete();
        $this->AktualsLabels->delete();
        
        $this->save();
        

        if ( sizeof( $aTags ) > 0 ) {
            foreach( $aTags as $tag ) {
                $aktualTags = new AktualsTag();
                $aktualTags->Aktuals_id = $this->id;
                $aktualTags->Tags_id = $tag->id;
                $aktualTags->save();
            }
        }
        $labels =  array();
        if ( isset( $aData['newlabel'] ) and ( $aData['newlabel'] != '' ) ) {
            $newLabel = Webbers_Normalize::Name( $aData['newlabel'] );
            $label = Label::getLabel( $newLabel );
            if ( $label != false ) {
                $labelID = $label->id;
            } else {
                $label = new Label();
                $label->Gname = $newLabel;
                $label->save();
                $labelID = $label->getIncremented();
            }
            $labels = array( $labelID );
        }

        if ( isset( $aData['labels'] ) and ( sizeof( $aData['labels'] ) > 0 ) ) {
            $labels = array_unique( array_merge( $aData['labels'], $labels ) );
            foreach( $labels as $lab ) {
                $al = new AktualsLabel();
                $al->Labels_id = $lab;
                $al->Aktuals_id = $this->id;
                $al->save();
            }
        }
        return $this->id;
    }

}