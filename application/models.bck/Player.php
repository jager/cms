<?php

/**
 * Player
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Player extends BasePlayer
{
	public static function findAll() {
		return Doctrine_Query::create()
							   ->select( "concat( sname, ', ', fname) as fullname, mailadr, gender, null as points, null as tournaments")
							   //->addSelect( "(select sum(score) from Ranks where Players_id = Player.id) as points")
							   //->addSelect( "(select count(1) from Ranks where Players_id = Player.id) as tournaments")
							   ->from('Player p');
	}

        public static function getToAutocomplete( $info ) {
            return Doctrine_Query::create()
                    ->select( "id, concat( fname, ' ', sname) as fullname")
                    ->from('Player p')
                    ->where( "lower( fname ) like lower('" . $info . "%') or lower( sname ) like lower('" . $info . "%')" )
                    ->execute();
        }
	
	public function addPlayer( $aData ) {
                if ( $this->playerExists( $aData['fname'], $aData['sname'], $aData['mailadr'] ) ) {
                    throw new Exception( "Podany przez ciebie zawodnik juÅ¼ istnieje w systemie! ");
                }
		$this->fname            = Webbers_Normalize::Name( $aData['fname'] );
		$this->sname            = Webbers_Normalize::Name( $aData['sname'] );
		$this->mailadr          = Webbers_Normalize::Email( $aData['mailadr'] );
		$this->gender           = $aData['gender'];
		$this->accept           = isset( $aData['accept'] ) ? $aData['accept'] : '1';
                $this->registered       = new Doctrine_Expression('NOW()');
                $this->registered_by    = $aData['registered_by'];
		$this->save();
	}

        public function updatePlayer( $aData ) {
            $this->id           = $aData['id'];
            $this->fname 	= Webbers_Normalize::Name( $aData['fname'] );
            $this->sname 	= Webbers_Normalize::Name( $aData['sname'] );
            $this->mailadr 	= Webbers_Normalize::Email( $aData['mailadr'] );
            $this->gender 	= $aData['gender'];
            $this->save();
        }
	
	public static function getPlayerById( $id ) {
		return Doctrine_Core::getTable('Player')->find( $id );
	}
	
	public function getPlayerByEmail( $email ) {
		return $this->getTable()->findByMailadr( $email );
		return Doctrine_Core::getTable( 'Player' )->findByMailadr( $email );
		
	}

        private function playerExists( $fname, $sname, $mailadr ) {
            $user = $this->getTable()->findByMailadr( $mailadr );
            if ( $user->count() > 0 ) {
                return true;
            }
            $user = $this->getTable()->findByFnameAndSname( $fname, $sname );
            if ( $user->count() > 0 ) {
                return true;
            }
            return false;
        }

        public static function getToArray() {
            return Doctrine_Query::create()
                        ->select( "id, concat( fname, ' ', sname ) as fullname, gender")
                        ->from( 'Player' )
                        ->orderBy( 'sname asc' )
                        ->execute();                        
        }

        public function delPlayer() {
            $this->Ranks->delete();
            $this->FotosPlayers->delete();
            Doctrine_Query::create()
                        ->delete( 'Team' )
                        ->where( 'teammate1_id = ' . $this->id . ' or teammate2_id = ' . $this->id );
            $this->delete();
        }
}