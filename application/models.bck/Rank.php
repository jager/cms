<?php

/**
 * Rank
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Rank extends BaseRank
{
    const NO_RANK_TO_UPDATE = "Brak zapisanych wynikÃ³w do stworzenia rankingu";

    public function updateRank() {
        $teamRank = $this->getTeamsRanks( new Team() );
        if ( sizeof( $teamRank ) == 0 ) {
            throw new Exception( NO_RANK_TO_UPDATE );
        }

        foreach( $teamRank as $rank ) {
            $oRank = $this->getTable()->findOneByPlayers_idAndTournaments_id( $rank->teammate1_id, $rank->Tournaments_id );
            $this->saveRank( $rank->teammate1_id, $rank->Tournaments_id, $rank->score, $oRank );

            $oRank = $this->getTable()->findOneByPlayers_idAndTournaments_id( $rank->teammate2_id, $rank->Tournaments_id );
            $this->saveRank( $rank->teammate2_id, $rank->Tournaments_id, $rank->score, $oRank );
        }
    }

    private function getTeamsRanks( Team $team ) {
        return $team->getAll();
    }

    private function saveRank( $playerId, $tournamentId, $score, $oRank ) {
       if ( $oRank instanceof Doctrine_Record ) {
            $oRank->score = $score;
            $oRank->save();
        } else {
            $rank = new Rank();
            $rank->Players_id       = $playerId;
            $rank->Tournaments_id   = $tournamentId;
            $rank->score            = $score;
            $rank->save();
        }
    }

    public function getAll() {
        $aRank = array(
            "male"      => array(),
            "female"    => array()
        );
        $all = $this->getTable()->findAll();
        foreach( $all as $rank ) {
            $playerName = $rank->Player->fname . ' ' . $rank->Player->sname;
            if ( $rank->Player->gender == 'm') {
                $aRank['male'][$playerName][$rank->Tournaments_id] = $rank->score;
            } else {
                $aRank['female'][$playerName][$rank->Tournaments_id] = $rank->score;
            }
        }
        return $aRank;
    }

    public function getRankingTo( $limit = 0 ) {
        $aRanking = $this->getAll();
        $aReturn = array();
        foreach( $aRanking as $gender => $ranking ) {
            $i = 0;
            foreach( $ranking as $playerName => $points ) {               
                $sumOfPoints = 0;
                foreach( $points as $p ) $sumOfPoints += $p;
                $playerSummary = new stdClass();
                $playerSummary->name = $playerName;
                $playerSummary->points = $sumOfPoints;
                $aReturn[ $gender ][] = $playerSummary;
            }
        }
        usort( $aReturn['male'], array( $this, 'sortRank' ) );
        usort( $aReturn['female'], array( $this, 'sortRank' ) );
        if ( $limit > 0 ) {                 
            $aReturn['male'] = array_slice( $aReturn['male'], 0, $limit );
            $aReturn['female'] = array_slice( $aReturn['female'], 0, $limit );
        }
        return $aReturn;
    }

    private function sortRank( $value1, $value2 ) {
        if ( $value1->points == $value2->points ) {
            return 0;
        }
        return ( $value1->points > $value2->points ) ? -1 : 1;
    }
}