<?php

/**
 * Tournament
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Tournament extends BaseTournament
{
    public static function findTournaments( $where = '', $limit = 0 ) {
        $limit = (int)$limit;
        $query = Doctrine_Query::create()
                    ->select( "id,
                               tname,
                               kind,
                               concat( zip, ' ', city, ', ', street ) as address,
                               start_date,
                               start_time,
                               max_team_no"
                            )
                    ->from( 'Tournament');
        if ( $where != '' ) {
            $query->where( $where );
        }
        $query->orderBy( 'start_date asc' );
        if ( $limit > 0 ) {
            $query->limit( $limit );
        }
        return $query;
    }

    public static function getById( $id ) {
        return Doctrine_Core::getTable('Tournament')->find( $id );
    }

    public static function findActive() {
        return self::findTournaments( "start_date > now()" );
    }

    public static function findActiveToMainpage( $limit ) {
        return self::findTournaments( "start_date > now()", $limit )->execute();
    }

    public static function findArchive() {
        return self::findTournaments("start_date <= now()");
    }

    public function addTournament( $aData ) {
        if ( !$aData ) {
            throw new Exception( 'Brak danych do załadowania!');
        }
        $this->tname            = $aData['tname'];
        $this->kind             = $aData['kind'];
        $this->start_date       = $aData['start_date'];
        $this->start_time       = $aData['start_time'];
        $this->city             = $aData['city'];
        $this->zip              = $aData['zip'];
        $this->street           = $aData['street'];
        $this->rank             = $aData['rank'];
        $this->max_team_no      = $aData['max_team_no'];
        $this->start_enroll     = $aData['start_enroll'];
        $this->end_enroll       = $aData['end_enroll'];
        $this->save();
    }

    public function updateTournament( $aData ) {
        //Zend_Debug::dump( $aData );die();
        //Zend_Debug::dump ( $this->id );
        $this->id               = $aData['id'];
        $this->tname            = $aData['tname'];
        $this->kind             = $aData['kind'];
        $this->start_date       = $aData['start_date'];
        $this->start_time       = $aData['start_time'];
        $this->city             = $aData['city'];
        $this->zip              = $aData['zip'];
        $this->street           = $aData['street'];
        $this->rank             = $aData['rank'];
        $this->max_team_no      = $aData['max_team_no'];
        $this->start_enroll     = $aData['start_enroll'];
        $this->end_enroll       = $aData['end_enroll'];
        $this->save();
    }

    public static function getToArray() {
        return Doctrine_Query::create()
                        ->select( "id, concat( tname, ' (', start_date, ')') as fullname, kind, max_team_no")
                        ->addSelect( "(select count(1) from Teams where Tournaments_id = Tournament.id) as team_no")
                        ->from( 'Tournament' )
                        ->execute();            
    }

    public function createteam( $aData ) {
        if ( $this->samePlayer( $aData['teammate1_id'], $aData['teammate2_id'] ) ) {
            throw new Exception( 'Musisz wybrać dwóch różnych zawodników!' );
        }

        if ( $this->checkIfTeamExists( $aData['Tournaments_id'], $aData['teammate1_id'], $aData['teammate2_id'] ) ) {
            throw new Exception( 'Nie można dodać takiej drużyny do tego turnieju!' );
        }

        $tour = $this->getTable()->find( $aData['Tournaments_id'] );
        $player1 = Player::getPlayerById($aData['teammate1_id']);
        $player2 = Player::getPlayerById($aData['teammate2_id']);

        if ( !$this->checkTournament( $player1->gender, $player2->gender, $tour->kind ) ) {
            throw new Exception( 'Rodzaj turnieju nie pozwala na zestawienie takiego zespołu. Wybierz do turnieju męskiego dwie pary męskie, do żeńskiego dwie pary kobiece, a do mieszanego parę mieszaną.');
        }

        $team = new Team();
        $team->Tournaments_id       = (int)$aData['Tournaments_id'];
        $team->teammate1_id         = (int)$aData['teammate1_id'];
        $team->teammate2_id         = (int)$aData['teammate2_id'];
        $team->enrolled             = new Doctrine_Expression('NOW()');
        $team->save();

        $countTeams = $tour->Teams->count();

        if ( $countTeams ) {
            $countTeams *= 10;
            $tour->rank = $countTeams;
            $tour->save();
        }



    }

    private function checkIfTeamExists( $tID, $player1ID, $player2ID ) {
        $exists = Doctrine_Query::create()
                    ->select( "count(1) as exists")
                    ->from( 'Team' )
                    ->where( 'Tournaments_id = ?', $tID )
                    ->andWhere( 'teammate1_id in (' . $player1ID . ', ' . $player2ID . ') or 
                                 teammate2_id in (' . $player1ID . ', ' . $player2ID . ')' )
                    ->execute( array(), DOCTRINE_CORE::HYDRATE_SINGLE_SCALAR);
        if ( $exists == 0 ) {
            return false;
        }
        return true;
    }

    private function checkTournament( $gender1, $gender2, $kind ) {
        switch( $kind ) {
            case 'male':
                return ( $gender1 == 'm' && $gender2 == 'm' ) ? true : false;
            break;

            case 'female':
                return ( $gender1 == 'f' && $gender2 == 'f' ) ? true : false;
            break;

            default:
                return ( $gender1 != $gender2 ) ? true : false;
            break;
        }
    }

    private function samePlayer( $player1, $player2 ) {
        return ( $player1 == $player2 ) ? true : false;
    }

    public function delTour() {
        $sql = Doctrine_Query::create()->delete( 'Team' )->where( 'Tournaments_id = ?', $this->id )->execute();
        $sql = Doctrine_Query::create()->delete( 'Rank' )->where( 'Tournaments_id = ?', $this->id )->execute();
        $sql = Doctrine_Query::create()->delete( 'Foto' )->where( 'Tournaments_id = ?', $this->id )->execute();
        $sql = Doctrine_Query::create()->delete( 'Galery' )->where( 'tournament_id = ?', $this->id )->execute();
        $this->delete();
    }

}