<?php

/**
 * Foto
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
class Foto extends BaseFoto
{
    private $_tmpPath = '/tmp';
    private function transfer( $destination ) {
		//s( $destination ); return;
		if ( !is_dir( $destination ) ) {
			mkdir( $destination, 0777, true );
		}
		$adapter = new Zend_File_Transfer_Adapter_Http();

		$adapter->setDestination( $destination );

		if ( !$adapter->receive() ) {
		    $messages = $adapter->getMessages();
		    return implode("<br />", $messages);
		} else {
                    return $adapter;
		}
	}



        public function upload( $aData = array() ) {
            if ( !$aData or ( sizeof( $aData )  == 0 ) ) {
                throw new Exception( "No data sent!" );
            }

            $file = $this->transfer( $this->_tmpPath );
            if ( !$file instanceof Zend_File_Transfer_Adapter_Http ) {
                throw new Exception( $file );
            }

            $source = $file->getFileName('file');
            $name = $file->getFileName('file', false);

            $fileHandler = $this->setHandler( $file->getMimeType( 'file' ), $source, $aData['GALERY'] );
            $aFotos = $fileHandler->getFiles();
            if ( ( $aData['GALERY'] > 0 ) and ( sizeof( $aFotos ) > 0 ) ) {
                foreach ( $aFotos as $fotoName ) {
                    $this->Galeries_id = $aData['GALERY'];
                    $this->sourcename = $fotoName;
                    $this->added = date('Y-m-d H:i:s', time() );                   
                    $this->save();
                }
            }
        }

        private function setHandler( $mime, $source, $suffix ) {
            switch( $mime ) {
                case 'image/jpeg':
                    return new Webbers_File_HandlerJpeg( $source, $suffix );
                break;
                case 'application/zip':
                    return null;
                break;
                default:
                     return null;
                break;
            }
        }

        public static function getById( $fotoId ) {
            return Doctrine_Core::getTable('Foto')->findById( $fotoId );
        }

        public function updateFoto( $aData ) {
            $aTags = Tag::checkTags( Tag::makeTags( $aData['tags'] ) );
            if ( isset( $aData['id' ] ) ) {
                $this->id = $aData['id'];
            } else {

            }
            $this->description = $aData['description'];
            $this->tags = $aData['tags'];
            $this->author = $aData['author'];
            $this->save();
            foreach ( $aTags as $tag ) {
                $fotoToTag = new FotosTag();
                $fotoToTag->Fotos_id = $this->id;
                $fotoToTag->Tags_id = $tag->id;
                $fotoToTag->Fotos_Tournaments_id = $this->Tournaments_id;
                $fotoToTag->Fotos_Galeries_id = $this->Galeries_id;
                $fotoToTag->save();
            }
            return $this->Galeries_id;
        }

        public function moveFoto( $aData, $toLeave = false ) {
            if ( !$aData or !isset( $aData['id'] ) or !isset( $aData['Galeries_id'] ) ) {
                throw new Exception( 'Brak danych aby wykonaÄ‡ operacjÄ™' );
            }

            try {
                $handler = new Webbers_File_HandlerFoto();
                $source = $handler->setDestination( $this->Galeries_id ) . $this->sourcename;
                $destination = $handler->setDestination( $aData["Galeries_id"] );
                $destinationName = md5( $this->sourcename . time() ) . '.' . substr( $this->sourcename, -3 );
                $handler->setSource( $source )
                        ->setDestinationDirectory( $destination )
                        ->setDestinationName( $destinationName  );
                $handler->moveFoto( $toLeave );
                $source =$handler->setDestination( $this->Galeries_id ) . 'min/' . $this->sourcename;
                $destination =$handler->setDestination( $aData["Galeries_id"] ) . 'min/';
                $handler->setSource( $source )
                        ->setDestinationDirectory( $destination )
                        ->setDestinationName( $destinationName  );
                $handler->moveFoto( $toLeave );
            } catch ( Exception $e ) {
                throw new Exception( $e->getMessage() );
                return;
            }
            if ( !$toLeave ) {
                $this->id = $aData['id'];
                $this->Galeries_id = $aData['Galeries_id'];
                $this->Tournaments_id = $aData['Tournaments_id'];
                $this->sourcename = $destinationName;
                $this->save();
            } else {
                  $f = $this->copy( true );
                  unset( $f->id );
                  $f->added = date( 'Y-m-d H:i:s' );
                  $f->Galeries_id = $aData['Galeries_id'];
                  $f->sourcename = $destinationName;
                  $f->save();
            }
        }
}